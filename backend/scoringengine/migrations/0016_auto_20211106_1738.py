# Generated by Django 3.2 on 2021-11-06 17:38

import django.contrib.postgres.fields
from django.db import migrations, models

import scoringengine.models


class Migration(migrations.Migration):

    dependencies = [
        ("scoringengine", "0015_auto_20210709_1526"),
    ]

    operations = [
        migrations.AddField(
            model_name="answer",
            name="values",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.DecimalField(
                    blank=True, decimal_places=2, max_digits=12, null=True
                ),
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="question",
            name="type",
            field=models.CharField(
                choices=[
                    ("O", "Open"),
                    ("CH", "Choices"),
                    ("MC", "Multiple choices"),
                    ("S", "Slider"),
                ],
                help_text="<b>Open</b> questions without specific expected answer. Has no associated value, so can not be used in recommendations rules and in scoring models formulas for X-axis, Y-axis score calculation. </br> <b>Choices</b> question with predefined expected answers options. Answer can be any text. Each answer option has associated value. Can be used in recommendations rules and in scoring models formulas for X-axis, Y-axis score calculation. </br><b>Multiple choices</b> question with predefined expected answers options. Answer can be any text. Multiple answers selection allowed. Each answer option has associated value. Can be used in scoring model for X-axis, Y-axis score calculation but not in recommendations rules and in scoring models formulas. </br><b>Slider</b> question with predefined range of possible values. Answer is a value. Can be used in recommendations rules and in scoring models formulas for X-axis, Y-axis score calculation. </br>",
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="rule",
            field=models.CharField(
                help_text='Rule should start with "If" and may contain only valid numbers, questions with choices "Field names" in curly braces (e.g. {field_name}) combined with arithmetic (+, -, *, /), comparison (>, <, ==, !=, >=, <=), logical operations (and, or, not) and parentheses',
                max_length=200,
                validators=[scoringengine.models.validate_rule],
            ),
        ),
    ]
